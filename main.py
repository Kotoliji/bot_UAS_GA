# bot/main.py
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import asyncio
import sqlite3


# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DB_FILE = "registration.db"
conn = sqlite3.connect(DB_FILE)
cursor = conn.cursor()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
BOT_TOKEN = "8075180480:AAEngdrSgnU0N50pb8cJSN5Y2eZMGf0Kf60"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# FSM –¥–ª—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
class RegistrationForm(StatesGroup):
    select_oss = State()
    select_delegate = State()
    full_name = State()
    dates = State()
    travel = State()
    daily_limit = State()
    food_preferences = State()
    medical_info = State()
    suggestions = State()
    confirmation = State()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
def init_db():
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS delegates (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        username TEXT,
        oss TEXT,
        delegate_type TEXT,
        full_name TEXT,
        dates TEXT,
        travel TEXT,
        daily_limit REAL,
        food_preferences TEXT,
        medical_info TEXT,
        suggestions TEXT
    )
    """)
    conn.commit()

init_db()

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
def global_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="–î–æ–≤—ñ–¥–∫–∞"))
    kb.add(KeyboardButton(text="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –£–ê–°"))
    kb.add(KeyboardButton(text="–î–æ–ª—É—á–∏—Ç–∏—Å—å –¥–æ –∫–æ–º–∞–Ω–¥–∏ –£–ê–°"))
    return kb.as_markup(resize_keyboard=True)

# –•–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç—É
from aiogram.filters import Command

@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –ù–∞–º 25 —Ä–æ–∫—ñ–≤, —ñ –º–∏ –ø—Ä–æ–≤–æ–¥–∏–º–æ –æ—Å–∞–º–±–ª–µ—é. \n–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à –û–°–° —ñ–∑ –ø–µ—Ä–µ–ª—ñ–∫—É:",
        reply_markup=global_keyboard()
    )
    await show_oss_keyboard(message)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–∫–∏ "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –£–ê–°"
@dp.message(lambda message: message.text == "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –£–ê–°")
async def info_about_uas(message: types.Message):
    await message.answer(
        "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –∞—Å–æ—Ü—ñ–∞—Ü—ñ—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ ‚Äî —Ü–µ –æ–±'—î–¥–Ω–∞–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –¥–ª—è —Ä–æ–∑–≤–∏—Ç–∫—É, –∑–∞—Ö–∏—Å—Ç—É –ø—Ä–∞–≤ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –º–æ–ª–æ–¥—ñ –£–∫—Ä–∞—ó–Ω–∏. "
        "–î—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ –º–æ–∂–Ω–∞ –Ω–∞ –Ω–∞—à–æ–º—É —Å–∞–π—Ç—ñ: https://uas.org.ua/"
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–∫–∏ "–î–æ–ª—É—á–∏—Ç–∏—Å—å –¥–æ –∫–æ–º–∞–Ω–¥–∏ –£–ê–°"
@dp.message(lambda message: message.text == "–î–æ–ª—É—á–∏—Ç–∏—Å—å –¥–æ –∫–æ–º–∞–Ω–¥–∏ –£–ê–°")
async def join_uas_team(message: types.Message):
    await message.answer(
        "–©–æ–± –¥–æ–ª—É—á–∏—Ç–∏—Å—å –¥–æ –Ω–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –Ω–∞ —Å–∞–π—Ç—ñ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–º –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É: team@uas.org.ua"
    )

# –í–∏–±—ñ—Ä –û–°–°
async def show_oss_keyboard(message: types.Message):
    kb = InlineKeyboardBuilder()
    universities = ["–ö–ù–£", "–ö–ü–Ü", "–ß–ù–£", "–•–ù–£"]
    for uni in universities:
        kb.add(InlineKeyboardButton(text=uni, callback_data=f"oss_{uni}"))
    kb.add(InlineKeyboardButton(text="–ú–æ–≥–æ –û–°–° –Ω–µ–º–∞ –≤ —Å–ø–∏—Å–∫—É", callback_data="oss_none"))
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –≤–∞—à —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç:", reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data.startswith("oss_"))
async def oss_selected(callback: types.CallbackQuery, state: FSMContext):
    selected = callback.data.split("_")[1]
    if selected == "none":
        await callback.message.answer("–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ —Ä–æ–∑–¥—ñ–ª—É '–î–æ–≤—ñ–¥–∫–∞'.")
    else:
        await state.update_data(oss=selected)
        await callback.message.answer(
            "–•—Ç–æ –º–æ–∂–µ –±—É—Ç–∏ –¥–µ–ª–µ–≥–∞—Ç–æ–º?",
            reply_markup=delegate_keyboard()
        )
        await state.set_state(RegistrationForm.select_delegate)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –¥–µ–ª–µ–≥–∞—Ç–∞
def delegate_keyboard():
    kb = InlineKeyboardBuilder()
    kb.add(
        InlineKeyboardButton(text="–Ø –≥–æ–ª–æ–≤–∞ —ñ —è –±—É–¥—É", callback_data="delegate_self")
    )
    kb.add(
        InlineKeyboardButton(text="–Ø –≥–æ–ª–æ–≤–∞ - –∞–ª–µ –±—É–¥–µ —ñ–Ω—à–∏–π", callback_data="delegate_other")
    )
    kb.add(
        InlineKeyboardButton(text="–Ø –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫ —ñ –º–∞—é –º–∞–Ω–¥–∞—Ç", callback_data="delegate_representative")
    )
    return kb.as_markup()


@dp.callback_query(lambda c: c.data.startswith("delegate_"))
async def delegate_selected(callback: types.CallbackQuery, state: FSMContext):
    delegate_types = {
        "self": "–Ø –≥–æ–ª–æ–≤–∞ —ñ —è –±—É–¥—É",
        "other": "–Ø –≥–æ–ª–æ–≤–∞ - –∞–ª–µ –±—É–¥–µ —ñ–Ω—à–∏–π",
        "representative": "–Ø –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫ —ñ –º–∞—é –º–∞–Ω–¥–∞—Ç"
    }
    selected_key = callback.data.split("_")[1]
    selected = delegate_types.get(selected_key, "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –¥–µ–ª–µ–≥–∞—Ç–∞")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑—Ä–æ–∑—É–º—ñ–ª–µ –∑–Ω–∞—á–µ–Ω–Ω—è —É —Å—Ç–∞–Ω
    await state.update_data(delegate_type=selected)
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:")
    await state.set_state(RegistrationForm.full_name)


@dp.message(RegistrationForm.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–£ —è–∫—ñ –¥–Ω—ñ –±—É–¥–µ—Ç–µ?")
    await state.set_state(RegistrationForm.dates)

@dp.message(RegistrationForm.dates)
async def process_dates(message: types.Message, state: FSMContext):
    await state.update_data(dates=message.text)
    await message.answer("–ß–∏ –±—É–¥–µ –≤—ñ–¥—Ä—è–¥–∂–µ–Ω–Ω—è?")
    await state.set_state(RegistrationForm.travel)

@dp.message(RegistrationForm.travel)
async def process_travel(message: types.Message, state: FSMContext):
    await state.update_data(travel=message.text)
    await message.answer("–õ—ñ–º—ñ—Ç –ø–æ–∫—Ä–∏—Ç—Ç—è –∂–∏—Ç—Ç—è –Ω–∞ –¥–µ–Ω—å (—É –≥—Ä–Ω):")
    await state.set_state(RegistrationForm.daily_limit)

@dp.message(RegistrationForm.daily_limit)
async def process_daily_limit(message: types.Message, state: FSMContext):
    try:
        # –°–ø—Ä–æ–±–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —É float
        daily_limit = float(message.text)
        if daily_limit <= 0:
            raise ValueError("–õ—ñ–º—ñ—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –±—ñ–ª—å—à–∏–º –∑–∞ 0.")
    except ValueError:
        # –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –¥–ª—è –ª—ñ–º—ñ—Ç—É –ø–æ–∫—Ä–∏—Ç—Ç—è –Ω–∞ –¥–µ–Ω—å.")
        return

    # –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω–µ, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ
    await state.update_data(daily_limit=daily_limit)
    await message.answer("–•–∞—Ä—á—É–≤–∞–Ω–Ω—è (–æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ):")
    await state.set_state(RegistrationForm.food_preferences)

@dp.message(RegistrationForm.food_preferences)
async def process_food(message: types.Message, state: FSMContext):
    await state.update_data(food_preferences=message.text)
    await message.answer("–ú–µ–¥–∏—á–Ω—ñ –ø–æ—Ç—Ä–µ–±–∏:")
    await state.set_state(RegistrationForm.medical_info)

@dp.message(RegistrationForm.medical_info)
async def process_medical_info(message: types.Message, state: FSMContext):
    await state.update_data(medical_info=message.text)
    await message.answer("–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:")
    await state.set_state(RegistrationForm.suggestions)

@dp.message(RegistrationForm.suggestions)
async def process_suggestions(message: types.Message, state: FSMContext):
    await state.update_data(suggestions=message.text)
    user_data = await state.get_data()

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–∞–Ω–∏—Ö
    preview_text = (
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤–∞—à—ñ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º:\n"
        f"üîπ –£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç: {user_data.get('oss', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üîπ –¢–∏–ø –¥–µ–ª–µ–≥–∞—Ç–∞: {user_data.get('delegate_type', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üîπ –ü–Ü–ë: {user_data.get('full_name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üîπ –î–∞—Ç–∏ —É—á–∞—Å—Ç—ñ: {user_data.get('dates', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üîπ –í—ñ–¥—Ä—è–¥–∂–µ–Ω–Ω—è: {user_data.get('travel', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üîπ –õ—ñ–º—ñ—Ç –Ω–∞ –¥–µ–Ω—å: {user_data.get('daily_limit', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üîπ –•–∞—Ä—á–æ–≤—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ: {user_data.get('food_preferences', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üîπ –ú–µ–¥–∏—á–Ω—ñ –ø–æ—Ç—Ä–µ–±–∏: {user_data.get('medical_info', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üîπ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó: {user_data.get('suggestions', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n\n"
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ —Ü—ñ –¥–∞–Ω—ñ?"
    )

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –ø–µ—Ä–µ–≥–ª—è–¥–æ–º —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    await message.answer(
        preview_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–¢–∞–∫, –∑–±–µ—Ä–µ–≥—Ç–∏", callback_data="confirm_yes")],
            [InlineKeyboardButton(text="–ù—ñ, —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="confirm_edit")]
        ])
    )
    await state.set_state(RegistrationForm.confirmation)


@dp.callback_query(lambda c: c.data.startswith("confirm_"))
async def confirmation_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "confirm_yes":
        user_data = await state.get_data()
        cursor.execute('''INSERT INTO delegates (user_id, username, oss, delegate_type, full_name, dates, travel, daily_limit, food_preferences, medical_info, suggestions)
                           VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                       (callback.from_user.id, callback.from_user.username, user_data['oss'], user_data['delegate_type'],
                        user_data['full_name'], user_data['dates'], user_data['travel'], user_data['daily_limit'],
                        user_data['food_preferences'], user_data['medical_info'], user_data['suggestions']))
        conn.commit()
        await callback.message.answer("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞. –î—è–∫—É—é!")
        await state.clear()
    elif callback.data == "confirm_edit":
        await callback.message.answer("–ü–æ–≤–µ—Ä—Ç–∞—é –¥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è...")
        await state.set_state(RegistrationForm.full_name)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
